stages:
  - lint
  - install
  - test

variables:
  LE_FQDN: "ci.dev.acuparse.com"
  EMAIL: "ci@dev.acuparse.com"
  TEST_USERNAME: "ci"
  TEST_PASSWORD: "P@55w0rd!"

.TEMPLATE:LOCAL:install:
  stage: install
  before_script:
    - apt-get update
    - apt-get dist-upgrade -yq
    - apt-get install curl wget -yq
  script:
    - bash tests/installer
  artifacts:
    paths:
      - output
  dependencies: [ ]

.TEMPLATE:DOCKER:container:
  stage: install
  image: alpine
  variables:
    MYSQL_ROOT_PASSWORD: P@ssw0rd1234
    MYSQL_DATABASE: acuparse
    MYSQL_USER: acuparse
    MYSQL_PASSWORD: P@ssw0rd1234
    MYSQL_HOSTNAME: db
    TZ: America/Denver
    FF_NETWORK_PER_BUILD: 1
  before_script:
    - apk --no-cache add curl mysql-client bash
    - >
      while ! mysqladmin ping -h"${MYSQL_HOSTNAME}" -p"${MYSQL_PASSWORD}" --silent; do
        echo "Waiting for SQL Container"
        ((c++)) && ((c==30)) && break
        sleep 5
      done
    - chmod +x tests/installer
  script:
    - tests/installer container
  allow_failure: true
  artifacts:
    paths:
      - output
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
    - if: '$CI_COMMIT_BRANCH == "dev"'
  dependencies: [ ]

.TEMPLATE:DOCKER:install:
  stage: install
  before_script:
    - apt-get update
    - apt-get dist-upgrade -yq
    - apt-get install curl -yq
  script:
    - >
      if [ "$CI_COMMIT_BRANCH" != "master" ]; then
        sed -i "s/REPO='master'/REPO='"$CI_COMMIT_BRANCH"'/" install_docker
      fi
    - bash tests/installer docker
  artifacts:
    paths:
      - output
  dependencies: [ ]

LINT:bash:
  image: koalaman/shellcheck-alpine
  stage: lint
  before_script:
    - export SHELLCHECK_OPTS="-e SC2034 -e SC2059"
  script:
    - shellcheck install
    - shellcheck resources/*
  dependencies: [ ]

LINT:markdown:
  stage: lint
  image: node:latest
  before_script:
    - npm install -g markdownlint-cli
  script:
    - markdownlint .
  dependencies: [ ]

TEST:INSTALLER:DEBIAN:buster:
  extends: .TEMPLATE:LOCAL:install
  image: debian:buster

TEST:INSTALLER:UBUNTU:bionic:
  extends: .TEMPLATE:LOCAL:install
  image: ubuntu:bionic

TEST:INSTALLER:UBUNTU:focal:
  extends: .TEMPLATE:LOCAL:install
  image: ubuntu:focal

DEV:TEST:DOCKER:container:
  extends: .TEMPLATE:DOCKER:container
  services:
    - name: mariadb:latest
      alias: db
    - name: registry.gitlab.com/acuparse/acuparse/dev:latest
      alias: acuparse
  rules:
    - if: '$CI_COMMIT_BRANCH != "master"'
  dependencies: [ ]

TEST:DOCKER:container:
  extends: .TEMPLATE:DOCKER:container
  services:
    - name: mariadb:latest
      alias: db
    - name: registry.gitlab.com/acuparse/acuparse/master:latest
      alias: acuparse
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
  dependencies: [ ]

TEST:DOCKER:INSTALLER:DEBIAN:buster:
  extends: .TEMPLATE:DOCKER:install
  image: debian:buster

TEST:DOCKER:INSTALLER:UBUNTU:bionic:
  extends: .TEMPLATE:DOCKER:install
  image: ubuntu:bionic

TEST:DOCKER:INSTALLER:UBUNTU:focal:
  extends: .TEMPLATE:DOCKER:install
  image: ubuntu:focal

include:
  - template: Jobs/Code-Quality.gitlab-ci.yml
