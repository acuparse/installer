stages:
  - lint
  - local
  - container
  - docker

workflow:
  rules:
    - if: $CI_COMMIT_BRANCH

variables:
  LE_FQDN: "ci.dev.acuparse.com"
  EMAIL: "ci@dev.acuparse.com"
  TEST_USERNAME: "ci"
  TEST_PASSWORD: "P@55w0rd!"

.TEMPLATE:LOCAL:install:
  stage: local
  before_script:
    - apt-get update
    - apt-get dist-upgrade -yq
    - apt-get install curl jq -yq
  script:
    - bash tests/installer
  artifacts:
    paths:
      - output
    when: on_failure
  dependencies: [ ]
  needs: [ LINT:bash ]

.TEMPLATE:DOCKER:container:
  stage: container
  image: alpine
  variables:
    MYSQL_ROOT_PASSWORD: P@ssw0rd1234
    MYSQL_DATABASE: acuparse
    MYSQL_USER: acuparse
    MYSQL_PASSWORD: P@ssw0rd1234
    MYSQL_HOSTNAME: db
    TZ: America/Denver
    FF_NETWORK_PER_BUILD: 1
  before_script:
    - apk --no-cache add curl jq mysql-client bash
    - >
      while ! mysqladmin ping -h"${MYSQL_HOSTNAME}" -p"${MYSQL_PASSWORD}" --silent; do
        echo "Waiting for SQL Container"
        ((c++)) && ((c==30)) && break
        sleep 5
      done
    - chmod +x tests/installer
  script:
    - tests/installer container
  allow_failure: true
  artifacts:
    paths:
      - output
    when: on_failure
  dependencies: [ ]
  needs: [ LINT:bash ]

.TEMPLATE:DOCKER:install:
  stage: docker
  variables:
    FF_NETWORK_PER_BUILD: 1
  before_script:
    - apt-get update
    - apt-get dist-upgrade -yq
    - apt-get install curl -yq
  script:
    - >
      if [ "$CI_COMMIT_BRANCH" != "master" ]; then
        sed -i "s/REPO='master'/REPO='"$CI_COMMIT_BRANCH"'/" install_docker
      fi
    - bash tests/installer docker
  artifacts:
    paths:
      - output
    when: on_failure
  dependencies: [ ]
  needs: [ LINT:bash, LINT:compose ]

LINT:bash:
  image: koalaman/shellcheck-alpine
  stage: lint
  before_script:
    - export SHELLCHECK_OPTS="-e SC2034 -e SC2059 -e SC2317"
  script:
    - shellcheck install
    - shellcheck install_docker
    - shellcheck docker/acuparse
    - shellcheck resources/*
    - shellcheck tests/installer
  dependencies: [ ]

LINT:markdown:
  stage: lint
  image: node:latest
  before_script:
    - npm install -g markdownlint-cli
  script:
    - markdownlint .
  dependencies: [ ]

LINT:compose:
  stage: lint
  image: docker/compose:latest
  script:
    - docker-compose -f docker/docker-compose.yml config
  dependencies: [ ]

DEBIAN:buster:
  extends: .TEMPLATE:LOCAL:install
  image: debian:buster

DEBIAN:bullseye:
  extends: .TEMPLATE:LOCAL:install
  image: debian:bullseye

UBUNTU:focal:
  extends: .TEMPLATE:LOCAL:install
  image: ubuntu:focal

UBUNTU:jammy:
  extends: .TEMPLATE:LOCAL:install
  before_script:
    - apt-get update
    - apt-get dist-upgrade -yq
    - apt-get install curl jq -yq
    - cp tests/resources/init.d/rsyslog /etc/init.d/rsyslog && chmod +x /etc/init.d/rsyslog
  image: ubuntu:jammy

DEV:CONTAINER:
  extends: .TEMPLATE:DOCKER:container
  services:
    - name: registry.gitlab.com/acuparse/mariadb/dev:latest
      alias: db
    - name: registry.gitlab.com/acuparse/acuparse/dev:latest
      alias: acuparse
  rules:
    - if: '$CI_COMMIT_BRANCH != "master"'

CONTAINER:
  extends: .TEMPLATE:DOCKER:container
  services:
    - name: registry.gitlab.com/acuparse/mariadb:latest
      alias: db
    - name: registry.gitlab.com/acuparse/acuparse:latest
      alias: acuparse
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'

DOCKER:DEBIAN:buster:
  extends: .TEMPLATE:DOCKER:install
  image: debian:buster

DOCKER:DEBIAN:bullseye:
  extends: .TEMPLATE:DOCKER:install
  image: debian:bullseye

DOCKER:UBUNTU:focal:
  extends: .TEMPLATE:DOCKER:install
  image: ubuntu:focal

DOCKER:UBUNTU:jammy:
  extends: .TEMPLATE:DOCKER:install
  image: ubuntu:jammy
